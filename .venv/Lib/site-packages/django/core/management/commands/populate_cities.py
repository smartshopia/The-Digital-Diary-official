import requests
from django.core.management.base import BaseCommand
from blog.models import City, State
from django.conf import settings

class Command(BaseCommand):
    help = 'Populate cities using Geoapify API'

    def add_arguments(self, parser):
        parser.add_argument('state_code', type=str, help='State code to populate cities for')

    def handle(self, *args, **kwargs):
        state_code = kwargs['state_code']
        api_key = settings.GEOAPIFY_API_KEY  # Ensure API key is set in Django settings
        url = f"https://api.geoapify.com/v2/places?categories=commercial.supermarket&filter=rect%3A10.716463143326969%2C48.755151258420966%2C10.835314015356737%2C48.680903341613316&limit=20&apiKey=952cdb76db284312bfed3445441cbc9b"

        try:
            response = requests.get(url)
            response.raise_for_status()  # Raises an HTTPError if the HTTP request returned an unsuccessful status code
            data = response.json()

            if 'features' not in data:
                self.stderr.write(f"Error fetching data: {data.get('error', 'Unknown error')}")
                return

            state = State.objects.filter(code=state_code).first()
            if not state:
                self.stderr.write(f"State with code {state_code} does not exist.")
                return

            for feature in data['features']:
                city_name = feature['properties'].get('name', 'Unknown')
                city_obj, created = City.objects.get_or_create(name=city_name, state=state)
                if created:
                    self.stdout.write(f"Added city: {city_obj.name}, {state.name}")
                else:
                    self.stdout.write(f"City already exists: {city_obj.name}, {state.name}")

            self.stdout.write(self.style.SUCCESS('Cities population complete.'))

        except requests.exceptions.HTTPError as http_err:
            self.stderr.write(f"HTTP error occurred: {http_err}")
        except Exception as err:
            self.stderr.write(f"Other error occurred: {err}")
